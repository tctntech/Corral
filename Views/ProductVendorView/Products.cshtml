
@model List<ProductAbsolute>

@{
    ViewData["Title"] = "Product Management";
}

<div class="container mt-3">
    <div class="row d-flex" style="height: 100vh;">
        <!-- Left Panel (Product List) -->
        <div class="col-md-6 col-lg-5 d-flex flex-column">
            <div class="card shadow-lg flex-fill">
                <div class="card-header bg-light">
                    <h5 class="mb-0">Product List</h5>
                </div>
                <div class="card-body d-flex flex-column">
                    <div class="input-group mb-3">
                        <input type="text" class="form-control" placeholder="Search Products by Name" id="productSearch" />
                    </div>
                    <div class="product-list-container flex-grow-1">
                        <table class="table table-striped table-hover">
                            <thead>
                                <tr>
                                    <th>ID</th>
                                    <th>Product Name</th>
                                    <th>Brand Name</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                            <tbody id="productListBody">
                                @foreach (var product in Model)
                                {
                                    <tr class="product-item" data-id="@product.ProductID">
                                        <td>@product.ProductID</td>
                                        <td>@product.ProductName</td>
                                        <td>@product.BrandName</td>
                                        <td>
                                            <button class="btn btn-sm btn-outline-primary select-product-btn" data-id="@product.ProductID">
                                                <i class="fas fa-arrow-right"></i>
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>        
        <!-- Right Panel (Product Details) -->
        <div class="col-md-6 col-lg-7 d-flex flex-column">
            <div class="card shadow-lg flex-fill">
                <div class="card-header bg-light">
                    <h5 class="mb-0">Product Details</h5>
                </div>
                <div class="card-body overflow-auto">
                    <form id="product-form">
                        <input type="hidden" id="productId" />
                        <div class="form-group">
                            <label for="productName">Product Name:</label>
                            <input type="text" class="form-control" id="productName" readonly />
                        </div>
                        <div class="form-group">
                            <label for="brandName">Brand Name:</label>
                            <input type="text" class="form-control" id="brandName" readonly />
                        </div>
                        <div class="form-group">
                            <label for="ContainerName">Container Name:</label>
                            <input type="text" class="form-control" id="ContainerName" readonly />
                        </div>
                        <div class="form-group">
                            <label for="relativeProductID">Relative Product ID:</label>
                            <input type="text" class="form-control" id="relativeProductID" readonly />
                        </div>
                        <div class="form-group">
                            <label for="relativeProductName">Relative Product Name:</label>
                            <input type="text" class="form-control" id="relativeProductName" readonly />
                        </div>
                        <div class="form-group">
                            <label for="description">Description:</label>
                            <textarea class="form-control" id="description"></textarea>
                        </div>

                        <div class="form-check">
                            <input type="checkbox" class="form-check-input" id="isAsset" />
                            <label class="form-check-label" for="isAsset">Asset</label>
                        </div>

                        <div class="form-group">
                            <label for="editPermission">Item Cost Edit Permission:</label>
                            <input type="checkbox" id="editPermission" />
                        </div>

                        <hr />

                        <div class="inventory-section">
                            <h5>Inventory</h5>
                            <div class="form-check">
                                <input type="checkbox" class="form-check-input" id="canBeInventoried" />
                                <label class="form-check-label" for="canBeInventoried">Able to be Inventoried</label>
                            </div>
                            <div class="form-group">
                                <label for="tareWeight">Tare Weight (oz):</label>
                                <input type="number" class="form-control" id="tareWeight" />
                            </div>
                            <div class="form-group">
                                <label for="inventoryCount">Inventory Count:</label>
                                <input type="text" class="form-control" id="inventoryCount" />
                            </div>
                        </div>

                        <!-- Save Button -->
                        <div class="text-center mt-3">
                            <button type="button" id="editProductBtn" class="btn btn-primary">Save Changes</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>


 <style>
    /* General Layout */
    .row {
        display: flex;
        align-items: stretch;
        gap: 20px;
        height: 80vh; /* Ensure full height usage */
    }

    .card {
        border-radius: 12px;
        box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.15);
        display: flex;
        flex-direction: column;
        height: 100%;
    }

    /* Card Header */
    .card-header {
        background-color: #f8f9fa;
        font-weight: bold;
        padding: 14px 22px;
        border-bottom: 1px solid #ddd;
        font-size: 16px;
    }

    /* Card Body */
    .card-body {
        flex-grow: 1;
        padding: 20px;
        overflow-y: auto;
    }

    .product-list-container {
        max-height: 60vh; /* Adjust height */
        overflow-y: auto;
        border-radius: 12px;
        border: 1px solid #ddd;
        padding: 10px;
        background-color: #fafafa;
        box-shadow: 0px 2px 8px rgba(0, 0, 0, 0.1);
    }

    /* Table Styling */
    .table {
        width: 100%;
        border-collapse: collapse;
        font-size: 14px;
    }

        .table th,
        .table td {
            border: 1px solid #e0e0e0; /* Softer border color */
            padding: 10px; /* Reduced padding */
            text-align: center;
            font-size: 14px; /* Smaller font size */
            line-height: 1.4;
        }

        .table thead th {
            background-color: #f8f9fa;
            font-weight: 600;
        }

    .table-hover tbody tr:hover {
        background-color: #f1f1f1;
        cursor: pointer;
    }

    .product-item:hover {
        background-color: #f9f9f9;
    }

    /* Highlight matching text in search */
    mark {
        background-color: yellow;
        color: black;
    }

    .form-control,
    .form-check-input {
        border-radius: 8px;
        padding: 8px; /* Reduced padding */
    }

    .btn-primary {
        border-radius: 8px;
        padding: 10px 20px;
        font-weight: bold;
        background-color: #007bff;
        transition: background-color 0.2s;
        border: none;
    }

        .btn-primary:hover {
            background-color: #0056b3;
        }

    /* Ensure checkboxes are aligned */
    .form-check {
        margin-bottom: 1rem;
    }

    .form-check-input {
        margin-top: 0.3rem;
    }
</style>

@section Scripts {
    <script>
        // Use event delegation on the table body to handle button clicks
        document.getElementById('productListBody').addEventListener('click', function(event) {
            if (event.target.classList.contains('select-product-btn') || event.target.closest('.select-product-btn')) {
                const row = event.target.closest('tr');
                const productId = row.getAttribute('data-id');
                console.log("Selected Product ID:", productId); // Debugging statement

                if (productId) {
                    // Fetch product details from the server using the productId
                    fetch(`/api/ProductVendor/GetById/${productId}`)
                        .then(response => response.json())
                        .then(data => {
                            console.log("Fetched product details:", data); // Debugging

                            // Populate the product details form with the fetched data
                            document.getElementById('productId').value = data.productID;
                            document.getElementById('productName').value = data.productName;
                            document.getElementById('ContainerName').value= data.ContainerName;
                            document.getElementById('description').value = data.productDescription;
                            document.getElementById('brandName').value = data.brandName;
                            document.getElementById('isAsset').checked = data.asset;
                            document.getElementById('editPermission').checked = data.itemCostCanBeModifiedInTransfer;
                            document.getElementById('canBeInventoried').checked = data.inventoried;
                            document.getElementById('tareWeight').value = data.baseTareWeight;
                            document.getElementById('inventoryCount').value = data.inventoryCtQty;
                            document.getElementById('relativeProductID').value = data.relativeProductID;
                            document.getElementById('relativeProductName').value = data.relativeProductName;
                        })
                        .catch(error => {
                            console.error('Error fetching product details:', error);
                        });
                }
            }
        });

        // Handle search functionality for product list
        document.getElementById('productSearch').addEventListener('input', function () {
            const searchQuery = this.value.toLowerCase();
            const rows = document.querySelectorAll('.product-item');
            rows.forEach(row => {
                const productName = row.querySelector('td:nth-child(2)').textContent.toLowerCase();
                if (productName.includes(searchQuery)) {
                    row.style.display = ''; // Show matching row
                } else {
                    row.style.display = 'none'; // Hide non-matching row
                }
            });
        });

        // Handle edit functionality for product details
        document.getElementById('editProductBtn').addEventListener('click', function () {
            const productId = document.getElementById('productId').value;
            if (!productId) {
                alert('No product selected!');
                return;
            }

            const updatedProduct = {
                productID: productId,
                productName: document.getElementById('productName').value,
                productDescription: document.getElementById('description').value,
                relativeProductName: document.getElementById('relativeProductName').value,
                brandName: document.getElementById('brandName').value,
                asset: document.getElementById('isAsset').checked,
                itemCostCanBeModifiedInTransfer: document.getElementById('editPermission').checked,
                inventoried: document.getElementById('canBeInventoried').checked,
                baseTareWeight: document.getElementById('tareWeight').value,
                inventoryCtQty: document.getElementById('inventoryCount').value
            };

            // Send updated data to the server
            fetch(`/api/ProductVendor/UpdateProduct/${productId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(updatedProduct),
            })
            .then(response => response.json())
            .then(data => {
                alert('Product updated successfully!');
            })
            .catch(error => {
                console.error('Error updating product:', error);
            });
        });
    </script>


}
